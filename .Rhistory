View(hotel_data)
View(missing_data_rows)
summary(missing_data_rows)
sum(missing_data_rows$hotel=="City Hotel"&missing_data_rows$is_canceled==0)
> sum(missing_data_rows$hotel=="Resort Hotel"&missing_data_rows$is_canceled==0)
> sum(missing_data_rows$hotel=="Resort Hotel"&missing_data_rows$is_canceled==0)
sum(missing_data_rows$hotel=="Resort Hotel"&missing_data_rows$is_canceled==0)
sum(missing_data_rows$hotel=="City Hotel"&missing_data_rows$is_canceled==0)
sum(missing_data_rows$is_canceled==0)
View(missing_data_rows)
View(hotel_data)
summarise(total_bookings=n())
hotel_data_by_year<-missing_data_rows%>%
group_by(arrival_date_year)%>%
summarise(total_bookings=n())
View(hotel_data_by_year)
ggplot(hotel_data_by_year,aes(x=factor(arrival_date_year),y=total_bookings))+geom_bar(stat = "identity")+labs(x="año",y="Numero de Reservas",title = "Numero de Reservas a los largo del año")
View(hotel_data_by_year)
View(meses_estaciones)
View(summary_stats)
View(summary_stats)
View(missing_data_rows)
View(missing_data_rows_seasons)
View(meses_estaciones)
View(hotel_data_by_date)
View(hotel_data_by_year)
View(hotel_data)
View(all_combinations)
View(meses_estaciones)
View(all_combinations)
View(hotel_data)
View(hotel_data_by_date)
View(hotel_data_by_year)
View(missing_data_rows_seasons)
# Crear un gráfico de barras apiladas
ggplot(estacion_data, aes(x = factor(arrival_date_year), y = total_bookings, fill = estacion)) +
geom_bar(stat = "identity") +
labs(x = "Año", y = "Número de Reservas", title = "Número de Reservas por Estación y Año") +
scale_fill_manual(values = c("Invierno" = "blue", "Primavera" = "green", "Verano" = "orange", "Otoño" = "red")) +
theme_minimal()
# Crear un gráfico de barras apiladas
ggplot(missing_data_rows_seasons, aes(x = factor(arrival_date_year), y = total_bookings, fill = estacion)) +
geom_bar(stat = "identity") +
labs(x = "Año", y = "Número de Reservas", title = "Número de Reservas por Estación y Año") +
scale_fill_manual(values = c("Invierno" = "blue", "Primavera" = "green", "Verano" = "orange", "Otoño" = "red")) +
theme_minimal()
# Crear un gráfico de barras apiladas
ggplot(missing_data_rows_seasons, aes(x = factor(arrival_date_year), y = total_bookings, fill = estacion)) +
geom_bar(stat = "identity") +
labs(x = "Año", y = "Número de Reservas", title = "Número de Reservas por Estación y Año") +
scale_fill_manual(values = c("Invierno" = "blue", "Primavera" = "green", "Verano" = "yellow", "Otoño" = "red")) +
theme_minimal()
View(missing_data_rows_seasons)
library(ggplot2)
# Crear un gráfico de barras
ggplot(datos, aes(x = factor(arrival_date_year), y = total_bookings, fill = estacion)) +
geom_bar(stat = "identity", position = "stack") +
labs(x = "Año", y = "Número de Reservas", title = "Resumen de Reservas por Año y Estación") +
scale_fill_manual(values = c("Invierno" = "blue", "Primavera" = "green", "Verano" = "orange", "Otoño" = "red")) +
theme_minimal()
library(ggplot2)
# Crear un gráfico de barras
ggplot(missing_data_rows_seasons, aes(x = factor(arrival_date_year), y = total_bookings, fill = estacion)) +
geom_bar(stat = "identity", position = "stack") +
labs(x = "Año", y = "Número de Reservas", title = "Resumen de Reservas por Año y Estación") +
scale_fill_manual(values = c("Invierno" = "blue", "Primavera" = "green", "Verano" = "orange", "Otoño" = "red")) +
theme_minimal()
library(ggplot2)
# Crear un gráfico de barras facetado por estación
ggplot(missing_data_rows_seasons, aes(x = factor(arrival_date_year), y = total_bookings, fill = estacion)) +
geom_bar(stat = "identity", position = "stack") +
labs(x = "Año", y = "Número de Reservas", title = "Resumen de Reservas por Estación y Año") +
scale_fill_manual(values = c("Invierno" = "blue", "Primavera" = "green", "Verano" = "orange", "Otoño" = "red")) +
theme_minimal() +
facet_wrap(~estacion, ncol = 4) # Facetado por estación
ggplot(missing_data_rows_seasons, aes(x = factor(arrival_date_year), y = total_bookings, fill = estacion)) +
+     geom_bar(stat = "identity", position = "stack") +
+     labs(x = "Año", y = "Número de Reservas", title = "Resumen de Reservas por Estación y Año") +
+     scale_fill_manual(values = c("Invierno" = "blue", "Primavera" = "green", "Verano" = "orange", "Otoño" = "red")) +
+     theme_minimal() +
+     facet_wrap(~estacion, ncol = 4) # Facetado por estación
ggplot(missing_data_rows_seasons, aes(x = factor(arrival_date_year), y = total_bookings, fill = estacion)) +
+     geom_bar(stat = "identity", position = "stack") +
+     labs(x = "Año", y = "Número de Reservas", title = "Resumen de Reservas por Estación y Año") +
+     scale_fill_manual(values = c("Invierno" = "blue", "Primavera" = "green", "Verano" = "yellow", "Otoño" = "red")) +
+     theme_minimal() +
+     facet_wrap(~estacion, ncol = 4) # Facetado por estación
ggplot(missing_data_rows_seasons, aes(x = factor(arrival_date_year), y = total_bookings, fill = estacion)) +
+     geom_bar(stat = "identity", position = "stack") +
+     labs(x = "Año", y = "Número de Reservas", title = "Resumen de Reservas por Estación y Año") +
+     scale_fill_manual(values = c("Invierno" = "blue", "Primavera" = "green", "Verano" = "yellow", "Otoño" = "red")) +
+     theme_minimal() +
+     facet_wrap(~estacion, ncol = 4) # Facetado por estación
library(ggplot2)
# Crear un gráfico de barras facetado por estación
ggplot(missing_data_rows_seasons, aes(x = factor(arrival_date_year), y = total_bookings, fill = estacion)) +
geom_bar(stat = "identity", position = "stack") +
labs(x = "Año", y = "Número de Reservas", title = "Resumen de Reservas por Estación y Año") +
scale_fill_manual(values = c("Invierno" = "blue", "Primavera" = "green", "Verano" = "orange", "Otoño" = "red")) +
theme_minimal() +
facet_wrap(~estacion, ncol = 4) # Facetado por estación
library(ggplot2)
# Crear un gráfico de barras facetado por estación
ggplot(missing_data_rows_seasons, aes(x = factor(arrival_date_year), y = total_bookings, fill = estacion)) +
geom_bar(stat = "identity", position = "stack") +
labs(x = "Año", y = "Número de Reservas", title = "Resumen de Reservas por Estación y Año") +
scale_fill_manual(values = c("Invierno" = "blue", "Primavera" = "green", "Verano" = "orange", "Otoño" = "red")) +
theme_minimal() +
facet_wrap(~estacion, ncol = 4) # Facetado por estación
library(ggplot2)
# Crear un gráfico de barras facetado por estación
ggplot(missing_data_rows_seasons, aes(x = factor(arrival_date_year), y = total_bookings, fill = estacion)) +
geom_bar(stat = "identity", position = "stack") +
labs(x = "Año", y = "Número de Reservas", title = "Resumen de Reservas por Estación y Año") +
scale_fill_manual(values = c("Invierno" = "blue", "Primavera" = "green", "Verano" = "yellow", "Otoño" = "red")) +
theme_minimal() +
facet_wrap(~estacion, ncol = 4) # Facetado por estación
library(ggplot2)
# Crear un gráfico de barras
ggplot(missing_data_rows_seasons, aes(x = factor(arrival_date_year), y = total_bookings, fill = estacion)) +
geom_bar(stat = "identity", position = "stack") +
labs(x = "Año", y = "Número de Reservas", title = "Resumen de Reservas por Año y Estación") +
scale_fill_manual(values = c("Invierno" = "blue", "Primavera" = "green", "Verano" = "orange", "Otoño" = "red")) +
theme_minimal()
library(ggplot2)
# Crear un gráfico de barras de la cantidad total de reservas por estación
ggplot(missing_data_rows_seasons, aes(x = estacion, y = total_bookings, fill = estacion)) +
geom_bar(stat = "identity") +
labs(x = "Estación", y = "Número de Reservas", title = "Resumen de Reservas por Estación") +
scale_fill_manual(values = c("Invierno" = "blue", "Primavera" = "green", "Verano" = "orange", "Otoño" = "red")) +
theme_minimal()
library(ggplot2)
# Crear un gráfico de barras de la cantidad total de reservas por estación
ggplot(missing_data_rows_seasons, aes(x = estacion, y = total_bookings, fill = estacion)) +
geom_bar(stat = "identity") +
labs(x = "Estación", y = "Número de Reservas", title = "Resumen de Reservas por Estación") +
scale_fill_manual(values = c("Invierno" = "blue", "Primavera" = "green", "Verano" = "yellow", "Otoño" = "red")) +
theme_minimal()
View(missing_data_rows_seasons)
View(missing_data_rows)
reservas_con_ninos <- missing_data_rows %>%
+    filter(children > 0 | babies > 0)
reservas_con_ninos <- missing_data_rows %>%    filter(children > 0 | babies > 0)
View(reservas_con_ninos)
View(reservas_con_ninos)
sum(reservas_con_ninos$has_children_or_babies)
summarise(reservas_con_ninos$has_children_or_babies)
summary(reservas_con_ninos$has_children_or_babies)
table(reservas_con_ninos$has_children_or_babies)
reservas_con_ninos <- missing_data_rows %>%    filter(children > 0 & babies > 0)
View(missing_data_rows)
View(missing_data_rows)
View(missing_data_rows)
View(missing_data_rows)
View(reservas_con_ninos)
View(missing_data_rows)
reservas_con_ninos_o_bebes <- missing_data_rows[missing_data_rows$children > 0 | missing_data_rows$babies > 0, ]
View(reservas_con_ninos_o_bebes)
View(missing_data_rows)
View(reservas_con_ninos)
View(reservas_con_ninos)
View(reservas_con_ninos_o_bebes)
View(missing_data_rows)
View(reservas_con_ninos_o_bebes)
View(missing_data_rows)
View(missing_data_rows_seasons)
View(missing_data_rows)
View(hotel_data)
View(missing_data_rows)
View(missing_data_rows)
missing_data_rows$has_children_or_babies[is.na(missing_data_rows$has_children_or_babies)] <- 0
# Supongamos que tienes una tabla llamada 'datos' que contiene las columnas 'children' y 'babies'
# Puedes calcular cuántas reservas incluyen niños o bebés de la siguiente manera:
reservas_con_ninos_o_bebes <- datos[datos$children > 0 | datos$babies > 0, ]
sum(missing_data_rows$has_children_or_babies==1)
# Supongamos que tienes un dataframe llamado 'datos' con la columna 'has_Babies'
# Contar la cantidad de reservas con y sin bebés
conteo_bebes <- table(missing_data_rows$has_children_or_babies)
# Crear un gráfico circular (gráfico de pastel)
pie(conteo_bebes, labels = c("Sin Bebés", "Con Bebés"), col = c("red", "blue"))
# Agregar un título
title("Proporción de Reservas con y sin Bebés")
# Supongamos que tienes un dataframe llamado 'datos' con la columna 'has_Babies'
# Contar la cantidad de reservas con y sin bebés
conteo_bebes <- table(missing_data_rows$has_children_or_babies)
# Crear un gráfico circular (gráfico de pastel)
pie(conteo_bebes, labels = c("No tiene niño o bebe", "Tiene niño o bebe"), col = c("blue", "grey"))
# Agregar un título
title("Proporción de Reservas con o sin Bebés")
# Supongamos que tienes un dataframe llamado 'datos' con la columna 'has_Babies'
# Contar la cantidad de reservas con y sin bebés
conteo_bebes <- table(missing_data_rows$has_children_or_babies)
# Crear un gráfico circular (gráfico de pastel)
pie(conteo_bebes, labels = c("No tiene niño o bebe", "Tiene niño o bebe"), col = c("red", "grey"))
# Agregar un título
title("Proporción de Reservas con o sin Bebés")
# Supongamos que tienes un dataframe llamado 'datos' con la columna 'has_Babies'
# Contar la cantidad de reservas con y sin bebés
conteo_bebes <- table(missing_data_rows$has_children_or_babies)
# Crear un gráfico circular (gráfico de pastel)
pie(conteo_bebes, labels = c("No tiene niño o bebe", "Tiene niño o bebe"), col = c("green", "lightblue"))
# Agregar un título
title("Proporción de Reservas con o sin Bebés")
# Supongamos que tienes un dataframe llamado 'datos' con la columna 'has_Babies'
# Contar la cantidad de reservas con y sin bebés
conteo_bebes <- table(missing_data_rows$has_children_or_babies)
# Crear un gráfico circular (gráfico de pastel)
pie(conteo_bebes, labels = c("No tiene niño o bebe", "Tiene niño o bebe"), col = c("aquamarine", "darkslategray1"))
# Agregar un título
title("Proporción de Reservas con o sin Bebés")
# Supongamos que tienes un dataframe llamado 'datos' con la columna 'has_Babies'
# Contar la cantidad de reservas con y sin bebés
conteo_bebes <- table(missing_data_rows$has_children_or_babies)
# Crear un gráfico circular (gráfico de pastel)
pie(conteo_bebes, labels = c("No tiene niño o bebe", "Tiene niño o bebe"), col = c("aquamarine", "darkturquoise"))
# Agregar un título
title("Proporción de Reservas con o sin Bebés")
# Supongamos que tienes un dataframe llamado 'datos' con la columna 'has_Babies'
# Contar la cantidad de reservas con y sin bebés
conteo_bebes <- table(missing_data_rows$has_children_or_babies)
# Crear un gráfico circular (gráfico de pastel)
pie(conteo_bebes, labels = c("No tiene niño o bebe", "Tiene niño o bebe"), col = c("chartreuse1", "darkturquoise"))
# Agregar un título
title("Proporción de Reservas con o sin Bebés")
View(hotel_data_by_year)
View(meses_estaciones)
View(missing_data_rows)
# Supongamos que tienes un dataframe llamado 'datos'
# Cargar la librería ggplot2 si aún no está cargada
library(ggplot2)
# Filtrar los datos para obtener personas que no han cancelado
personas_no_canceladas <- datos[datos$is_canceled == 0, ]
# Filtrar los datos para obtener personas que no han cancelado
personas_no_canceladas <- missing_data_rows[missing_data_rows$is_canceled == 0, ]
# Filtrar los datos para obtener personas que no han requerido espacio de estacionamiento
personas_sin_estacionamiento <- missing_data_rows[missing_data_rows$required_car_parking_spaces == 0, ]
# Contar el número de personas en cada grupo
conteo_no_canceladas <- nrow(personas_no_canceladas)
conteo_sin_estacionamiento <- nrow(personas_sin_estacionamiento)
# Crear un dataframe para el gráfico de barras
df_grafico <- data.frame(
Grupo = c("No Cancelado", "Sin Estacionamiento"),
Cantidad = c(conteo_no_canceladas, conteo_sin_estacionamiento)
)
# Crear el gráfico de barras
ggplot(df_grafico, aes(x = Grupo, y = Cantidad, fill = Grupo)) +
geom_bar(stat = "identity") +
labs(x = "Grupo", y = "Cantidad", title = "Comparación de Personas No Canceladas y Sin Estacionamiento") +
scale_fill_manual(values = c("No Cancelado" = "blue", "Sin Estacionamiento" = "red")) +
theme_minimal()
# Filtrar los datos para obtener personas que no han cancelado (0)
personas_no_canceladas <- missing_data_rows[missing_data_rows$is_canceled == 0, ]
# Crear un dataframe para el gráfico
df_grafico <- data.frame(
Grupo = c("Necesitaron Estacionamiento", "No Necesitaron Estacionamiento"),
Suma_Estacionamiento = c(sum(personas_no_canceladas$required_car_parking_spaces > 0),
sum(personas_no_canceladas$required_car_parking_spaces == 0))
)
# Crear el gráfico de barras
ggplot(df_grafico, aes(x = Grupo, y = Suma_Estacionamiento, fill = Grupo)) +
geom_bar(stat = "identity") +
labs(x = "Grupo", y = "Suma de Estacionamiento", title = "Comparación de Espacios de Estacionamiento Solicitados") +
scale_fill_manual(values = c("Necesitaron Estacionamiento" = "blue", "No Necesitaron Estacionamiento" = "red")) +
theme_minimal()
ggplot(df_grafico, aes(x = Grupo, y = Suma_Estacionamiento, fill = Grupo)) +
geom_bar(stat = "identity") +
geom_text(aes(label = Suma_Estacionamiento), vjust = -0.5, size = 5) + # Agregar etiquetas de cantidades
labs(x = "Grupo", y = "Suma de Estacionamiento", title = "Comparación de Espacios de Estacionamiento Solicitados") +
scale_fill_manual(values = c("Necesitaron Estacionamiento" = "blue", "No Necesitaron Estacionamiento" = "red")) +
theme_minimal()
View(hotel_data)
View(missing_data_rows)
View(missing_data_rows_seasons)
View(missing_data_rows_seasons)
View(missing_data_rows)
View(hotel_data_by_date)
View(hotel_data_by_year)
View(personas_no_canceladas)
View(hotel_data)
View(hotel_data)
View(missing_data_rows)
View(hotel_data)
View(meses_estaciones)
View(hotel_data)
View(hotel_data_by_date)
View(meses_estaciones)
View(missing_data_rows)
missing_data_rows$reservation_status_date<-hotel_data$reservation_status_date
is.na(missing_data_rows$reservation_status_date)
datos <- datos %>%
mutate(Mes = format(reservation_status_date, "%Y-%m"))
datos <- missing_data_rows %>%
mutate(Mes = format(reservation_status_date, "%Y-%m"))
datos <- missing_data_rows %>%
mutate(Mes = format(reservation_status_date, "%Y-%m-%d"))
# Supongamos que tienes un dataframe llamado 'datos' con las columnas 'reservation_status_date' (fecha) e 'is_canceled' (booleana)
# Cargar las librerías necesarias
library(ggplot2)
library(dplyr)
# Convertir la columna 'reservation_status_date' a formato de fecha si aún no está en ese formato
datos$reservation_status_date <- as.Date(datos$reservation_status_date)
# Supongamos que tienes un dataframe llamado 'datos' con las columnas 'reservation_status_date' (fecha) e 'is_canceled' (booleana)
# Cargar las librerías necesarias
library(ggplot2)
library(dplyr)
# Convertir la columna 'reservation_status_date' a formato de fecha si aún no está en ese formato
datos$reservation_status_date <- as.Date(datos$reservation_status_date)
# Supongamos que tienes un dataframe llamado 'datos' con las columnas 'reservation_status_date' (fecha) e 'is_canceled' (booleana)
# Cargar las librerías necesarias
library(ggplot2)
library(dplyr)
# Convertir la columna 'reservation_status_date' a formato de fecha si aún no está en ese formato
datos$reservation_status_date <- as.Date(datos$reservation_status_date)
# Supongamos que tienes un dataframe llamado 'datos' con las columnas 'reservation_status_date' (fecha) e 'is_canceled' (booleana)
# Cargar las librerías necesarias
library(ggplot2)
library(dplyr)
# Convertir la columna 'reservation_status_date' a formato de fecha si aún no está en ese formato
datos$reservation_status_date <- as.Date(datos$reservation_status_date)
# Supongamos que tienes un dataframe llamado 'datos' con las columnas 'reservation_status_date' (fecha) e 'is_canceled' (booleana)
# Cargar las librerías necesarias
library(ggplot2)
library(dplyr)
# Convertir la columna 'reservation_status_date' a formato de fecha si aún no está en ese formato
missing_data_rows$reservation_status_date <- as.Date(missing_data_rows$reservation_status_date)
# Extraer el mes y el año de la fecha de 'reservation_status_date'
datos <- missing_data_rows %>%
mutate(Mes = format(reservation_status_date, "%Y-%m"))
# Filtrar los datos para obtener solo las cancelaciones (is_canceled == 1)
cancelaciones <- missing_data_rows %>%
filter(is_canceled == 1)
# Contar la cantidad de cancelaciones por mes
conteo_cancelaciones <- cancelaciones %>%
group_by(Mes) %>%
summarize(Cantidad = n())
# Supongamos que tienes un dataframe llamado 'datos' con las columnas 'reservation_status_date' (fecha) e 'is_canceled' (booleana)
# Cargar las librerías necesarias
library(ggplot2)
library(dplyr)
# Convertir la columna 'reservation_status_date' a formato de fecha si aún no está en ese formato
missing_data_rows$reservation_status_date <- as.Date(missing_data_rows$reservation_status_date)
# Extraer el mes y el año de la fecha de 'reservation_status_date'
datos <- missing_data_rows %>%
mutate(Mes = format(reservation_status_date, "%Y-%m-%d"))
# Filtrar los datos para obtener solo las cancelaciones (is_canceled == 1)
cancelaciones <- missing_data_rows %>%
filter(is_canceled == 1)
# Contar la cantidad de cancelaciones por mes
conteo_cancelaciones <- cancelaciones %>%
group_by(Mes) %>%
summarize(Cantidad = n())
# Convertir la columna 'reservation_status_date' a formato de fecha si aún no está en ese formato
missing_data_rows$reservation_status_date <- as.Date(missing_data_rows$reservation_status_date)
# Extraer el mes y el año de la fecha de 'reservation_status_date'
datos <- missing_data_rows %>%
mutate(Mes = format(reservation_status_date, "%Y-%m-%d"))
# Filtrar los datos para obtener solo las cancelaciones (is_canceled == 1)
cancelaciones <- missing_data_rows %>%
filter(is_canceled == 1)
# Contar la cantidad de cancelaciones por mes
conteo_cancelaciones <- cancelaciones %>%
group_by(Mes) %>%
summarize(Cantidad = n())
# Convertir la columna 'reservation_status_date' a formato de fecha si aún no está en ese formato
missing_data_rows$reservation_status_date <- as.Date(missing_data_rows$reservation_status_date)
# Crear una nueva columna 'Mes' para extraer el mes de la fecha de 'reservation_status_date'
missing_data_rows <- missing_data_rows %>%
mutate(Mes = format(reservation_status_date, "%Y-%m"))
# Filtrar los datos para obtener solo las cancelaciones (is_canceled == 1)
cancelaciones <- missing_data_rows %>%
filter(is_canceled == 1)
# Contar la cantidad de cancelaciones por mes
conteo_cancelaciones <- cancelaciones %>%
group_by(Mes) %>%
summarize(Cantidad = n())
# Crear el gráfico de barras
ggplot(conteo_cancelaciones, aes(x = Mes, y = Cantidad)) +
geom_bar(stat = "identity", fill = "blue") +
labs(x = "Mes", y = "Cantidad de Cancelaciones", title = "Cancelaciones por Mes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Supongamos que tienes un dataframe llamado 'datos' con las columnas 'reservation_status_date' (fecha) e 'is_canceled' (booleana)
# Cargar las librerías necesarias
library(ggplot2)
library(dplyr)
# Convertir la columna 'reservation_status_date' a formato de fecha si aún no está en ese formato
missing_data_rows$reservation_status_date <- as.Date(missing_data_rows$reservation_status_date)
# Extraer el mes y el año de la fecha de 'reservation_status_date'
datos <- missing_data_rows %>%
mutate(Mes = format(reservation_status_date, "%m"))
# Filtrar los datos para obtener solo las cancelaciones (is_canceled == 1)
cancelaciones <- missing_data_rows %>%
filter(is_canceled == 1)
# Contar la cantidad de cancelaciones por mes
conteo_cancelaciones <- cancelaciones %>%
group_by(Mes) %>%
summarize(Cantidad = n())
# Crear el gráfico de barras
ggplot(conteo_cancelaciones, aes(x = Mes, y = Cantidad)) +
geom_bar(stat = "identity", fill = "blue") +
labs(x = "Mes", y = "Cantidad de Cancelaciones", title = "Cancelaciones por Mes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(conteo_cancelaciones, aes(x = Anio_Mes, y = Total_Cancelaciones)) +
geom_bar(stat = "identity", fill = "blue") +
labs(x = "Año y Mes", y = "Total de Cancelaciones", title = "Cancelaciones por Año y Mes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(conteo_cancelaciones, aes(x = Anio_Mes, y = Total_Cancelaciones)) +
geom_bar(stat = "identity", fill = "blue") +
labs(x = "Año y Mes", y = "Total de Cancelaciones", title = "Cancelaciones por Año y Mes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Convertir la columna 'reservation_status_date' a formato de fecha si aún no está en ese formato
missing_data_rows$reservation_status_date <- as.Date(missing_data_rows$reservation_status_date)
# Crear una nueva columna 'Anio_Mes' para extraer el año y mes de la fecha de 'reservation_status_date'
missing_data_rows <- missing_data_rows %>%
mutate(Anio_Mes = format(reservation_status_date, "%Y-%m"))
# Filtrar los datos para obtener solo las cancelaciones (is_canceled == 1)
cancelaciones <- missing_data_rows %>%
filter(is_canceled == 1)
# Contar la cantidad total de cancelaciones por año y mes
conteo_cancelaciones <- cancelaciones %>%
group_by(Anio_Mes) %>%
summarize(Total_Cancelaciones = n())
# Crear el gráfico de barras
ggplot(conteo_cancelaciones, aes(x = Anio_Mes, y = Total_Cancelaciones)) +
geom_bar(stat = "identity", fill = "blue") +
labs(x = "Año y Mes", y = "Total de Cancelaciones", title = "Cancelaciones por Año y Mes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Convertir la columna 'reservation_status_date' a formato de fecha si aún no está en ese formato
missing_data_rows$reservation_status_date <- as.Date(missing_data_rows$reservation_status_date)
# Extraer el año y el mes de la fecha de 'reservation_status_date'
datos <- missing_data_rows %>%
mutate(Anio = year(reservation_status_date), Mes = month(reservation_status_date))
# Filtrar los datos para obtener solo las cancelaciones (is_canceled == 1)
cancelaciones <- missing_data_rows %>%
filter(is_canceled == 1)
# Contar la cantidad de cancelaciones por año y mes
conteo_cancelaciones <- cancelaciones %>%
group_by(Anio, Mes) %>%
summarize(Total_Cancelaciones = n())
# Supongamos que tienes un dataframe llamado 'datos' con las columnas 'reservation_status_date' (fecha) e 'is_canceled' (booleana)
# Cargar las librerías necesarias
library(ggplot2)
library(dplyr)
# Convertir la columna 'reservation_status_date' a formato de fecha si aún no está en ese formato
missing_data_rows$reservation_status_date <- as.Date(missing_data_rows$reservation_status_date)
# Crear una nueva columna 'Anio_Mes' para extraer el año y el mes de la fecha de 'reservation_status_date'
datos <- missing_data_rows %>%
mutate(Anio_Mes = format(reservation_status_date, "%Y-%m"))
# Filtrar los datos para obtener solo las cancelaciones (is_canceled == 1)
cancelaciones <- missing_data_rows %>%
filter(is_canceled == 1)
# Contar la cantidad de cancelaciones por año y mes
conteo_cancelaciones <- cancelaciones %>%
group_by(Anio_Mes) %>%
summarize(Total_Cancelaciones = n())
# Crear el gráfico de barras
ggplot(conteo_cancelaciones, aes(x = Anio_Mes, y = Total_Cancelaciones)) +
geom_bar(stat = "identity", fill = "blue") +
labs(x = "Año y Mes", y = "Total de Cancelaciones", title = "Cancelaciones por Año y Mes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Supongamos que tienes un dataframe llamado 'datos' con las columnas 'reservation_status_date' (fecha) e 'is_canceled' (booleana)
# Cargar las librerías necesarias
library(ggplot2)
library(dplyr)
# Convertir la columna 'reservation_status_date' a formato de fecha si aún no está en ese formato
missing_data_rows$reservation_status_date <- as.Date(missing_data_rows$reservation_status_date)
# Crear una nueva columna 'Anio_Mes' para extraer el año y el mes de la fecha de 'reservation_status_date'
datos <- missing_data_rows %>%
mutate(Anio_Mes = format(reservation_status_date, "%Y-%m"))
# Filtrar los datos para obtener solo las cancelaciones (is_canceled == 1)
cancelaciones <- missing_data_rows %>%
filter(is_canceled == 1)
# Contar la cantidad de cancelaciones por año y mes
conteo_cancelaciones <- cancelaciones %>%
group_by(Anio_Mes) %>%
summarize(Total_Cancelaciones = n())
# Crear el gráfico de barras con etiquetas de texto
ggplot(conteo_cancelaciones, aes(x = Anio_Mes, y = Total_Cancelaciones)) +
geom_bar(stat = "identity", fill = "blue") +
geom_text(aes(label = Total_Cancelaciones), vjust = -0.5, size = 3) + # Agregar etiquetas de texto
labs(x = "Año y Mes", y = "Total de Cancelaciones", title = "Cancelaciones por Año y Mes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Supongamos que tienes un dataframe llamado 'datos' con las columnas 'reservation_status_date' (fecha) e 'is_canceled' (booleana)
# Cargar las librerías necesarias
library(ggplot2)
library(dplyr)
# Convertir la columna 'reservation_status_date' a formato de fecha si aún no está en ese formato
missing_data_rows$reservation_status_date <- as.Date(missing_data_rows$reservation_status_date)
# Crear una nueva columna 'Anio_Mes' para extraer el año y el mes de la fecha de 'reservation_status_date'
datos <- missing_data_rows %>%
mutate(Anio_Mes = format(reservation_status_date, "%Y-%m"))
# Filtrar los datos para obtener solo las cancelaciones (is_canceled == 1)
cancelaciones <- missing_data_rows %>%
filter(is_canceled == 1)
# Contar la cantidad de cancelaciones por año y mes
conteo_cancelaciones <- cancelaciones %>%
group_by(Anio_Mes) %>%
summarize(Total_Cancelaciones = n())
# Crear el gráfico de barras con etiquetas de texto
ggplot(conteo_cancelaciones, aes(x = Anio_Mes, y = Total_Cancelaciones)) +
geom_bar(stat = "identity", fill = "blue") +
geom_text(aes(label = Total_Cancelaciones), vjust = -0.5, size = 3) + # Agregar etiquetas de texto
labs(x = "Año y Mes", y = "Total de Cancelaciones", title = "Cancelaciones por Año y Mes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
names(missing_data_rows)
#------------
# Calcular el número de reservas de estación y año
# Definir estaciones y meses asociados
estaciones <- c("Invierno", "Primavera", "Verano", "Otoño")

# Meses por cada estación
meses_estaciones <- data.frame(
  mes = tolower(c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")),
  estacion = c("Invierno", "Invierno", "Primavera", "Primavera", "Primavera", "Verano", "Verano", "Verano", "Otoño", "Otoño", "Otoño", "Invierno")
)

# Convertir los nombres de los meses en minúscula en missing_data_rows
missing_data_rows <- missing_data_rows %>%
  mutate(arrival_date_month = tolower(arrival_date_month))

# Asignar estaciones por cada mes en missing_data_rows
missing_data_rows <- missing_data_rows %>%
  left_join(meses_estaciones, by = c("arrival_date_month" = "mes"))

# Calcular el número de reservas por estación y año en missing_data_rows
missing_data_rows_seasons <- missing_data_rows %>%
  group_by(estacion, arrival_date_year) %>%
  summarise(total_bookings = n())

# Crear un dataframe con todas las combinaciones de estaciones y años
all_combinations <- expand.grid(estacion = estaciones, arrival_date_year = unique(missing_data_rows$arrival_date_year))

# Combinar con los datos reales y rellenar valores faltantes con ceros
missing_data_rows_seasons <- all_combinations %>%
  left_join(missing_data_rows_seasons, by = c("estacion", "arrival_date_year")) %>%
  mutate(total_bookings = replace_na(total_bookings, 0))

# Calcular estadísticas resumen (media) para cada estación
summary_stats <- missing_data_rows_seasons %>%
  group_by(estacion) %>%
  summarise(avg_total_bookings = mean(total_bookings))

# Definir umbrales para reservas bajas, medias y altas (ajusta los valores según tus criterios)
umbral_bajo <- quantile(summary_stats$avg_total_bookings, 0.33)
umbral_alto <- quantile(summary_stats$avg_total_bookings, 0.67)

# Clasificar las estaciones en categorías en summary_stats
summary_stats <- summary_stats %>%
  mutate(categoria = case_when(
    avg_total_bookings < umbral_bajo ~ "Bajas",
    avg_total_bookings >= umbral_bajo & avg_total_bookings < umbral_alto ~ "Medias",
    avg_total_bookings >= umbral_alto ~ "Altas"
  ))

#----------
# Asegúrate de que total_bookings sea numérico
missing_data_rows_seasons$total_bookings <- as.numeric(missing_data_rows_seasons$total_bookings)

# Genera un boxplot para identificar outliers
boxplot(missing_data_rows_seasons$total_bookings, main = "Reservas Totales", boxwex = 0.5)

# Identifica los valores atípicos
outliers.values <- boxplot(missing_data_rows_seasons$total_bookings)$out

# Muestra los valores atípicos
outliers.values
